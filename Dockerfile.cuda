ARG UBUNTU_VERSION=22.04

# This needs to generally match the container host's environment.
ARG CUDA_VERSION=12.5
# ARG CUDA_VERSION=11.7.1

# Target the CUDA build image
ARG BASE_CUDA_DEV_CONTAINER=nvidia/cuda:${CUDA_VERSION}-devel-ubuntu${UBUNTU_VERSION}

FROM ${BASE_CUDA_DEV_CONTAINER}

# Unless otherwise specified, we make a fat build.
ARG CUDA_DOCKER_ARCH=all

# RUN sed -i "s/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g" /etc/apt/sources.list
RUN apt-get update && \
    apt-get install -y build-essential python3 python3-pip git libcurl4-openssl-dev cmake wget vim

COPY requirements.txt   requirements.txt
COPY requirements       requirements

RUN pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
RUN pip install --upgrade pip setuptools wheel \
    && pip install -r requirements.txt

WORKDIR /app

# Set nvcc architecture
ENV CUDA_DOCKER_ARCH=${CUDA_DOCKER_ARCH}
# Enable CUDA
ENV LLAMA_CUDA=1
# Enable cURL
ENV LLAMA_CURL=1

# Setup golang
# RUN wget https://dl.google.com/go/go1.22.4.linux-amd64.tar.gz
# RUN tar -C /usr/local/ -xzf go1.22.4.linux-amd64.tar.gz
# RUN echo "export PATH=$PATH:/usr/local/go/bin" >> ~/.bashrc
# RUN echo "export GOROOT=/usr/local/go" >> ~/.bashrc 
# RUN /usr/local/go/bin/go env -w GOPROXY=https://goproxy.cn,direct
# RUN rm go1.22.4.linux-amd64.tar.gz

# COPY . .
# RUN make -j$(nproc)
# ENTRYPOINT ["/app/.devops/tools.sh"]

CMD sleep infinity
